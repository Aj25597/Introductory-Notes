Section 3 
------------

Factors to consider when choosing AWS Region:
- Compliance with govt & legal reqs( Datat doesn't leave country)
- Latency: Proximity to Customers
- Available Services in a region: Every feature in every region
- Pricing( varies from region to region) 

AWS Availability Zones 
------------------------
 - Every region has 2-6(usually 3) avaiability zones (AZ)
 - Ex: Sydney AWS region: ap-southeast-2
	- ap-southeast-2a,2b,2c(3 total)
 - Each AZ has >=1 discrete data centers
	- Each DDC has redundant power, networking, & connectivity
	- Ex: 2a has 1 DDC, 2b has 2 DDC, 2b has 3 DDC
 - AWS doesn't disclose this info
 - Separate from each other
	- Helps isolate from disaster(if 2b goes down, 2a,c are fine)
 - Connected with high-bandwith, ultra-low latency linking
 - These 3 AZ's form a region 

AWS Points of Presence (Edge Location)
--------------------------------------- 

 - >= 200 PoP
 - Help deliver content to end user 
 
 
IAM
------
 - IAM: Identity and Access Management; Global Service
 - Root acct made by default, don't use or share 
 - Users = ppl within org, can be grouped
 - Groups can only contain users, not other groups
 - All users don't have to be in group, and user can be in multiple groups
 - Permissions:
	- Users/Groups can be assigned Policies(JSON doc)
	- Don't allow every user to use everything
 	- Policy describes user permissions
	- Follow the Least Privilege principle: Don't give more permissions than a user needs

IAM Policies
--------------
 - If a policy is applied to a group, all users in the group get that policy
 - An inline policy: Policy attached to a user 
 - If a user is in two groups, they will get policies from both groups 
 - Policy Structure
	- Version:
	- ID: Policy Identifies(optional)
	- Statement: >=1 individual statements(required)
	- Statements which consist of 
		- SID: Statement Identifier
		- Effect: Whether statements allows or denies access
		- Principal: account/user/role where policy applies
		- Action: list of actions this policy allows or denies
		- Resource: list of resources to which action applies
		- Condition: Condisition for when the policy is in effect(optional)
IAM Password Policy
---------------------
 - Can set up a password policy with
	- minimum length
	- Specific character types
 - Can allow all users to change password & change after a certain amount of time
 - Prevent re-use of old passwords
 - MFA: Multi Factor Authentication
 - Using a password and a security device to allow access to a resource
 - Even if password is stolen, hacker can't access security device 
MFA options
 - Virtual MFA device(google authenticator)
	- Support for multiple tokens on 1 device
 - Universal 2nd Factor(U2F) security key (YubiKey)
	- Support for multiple users using a single key 
 - Hardware Key Fob MFA device

 - 3 ways to access AWs
	- Management Console
	- CLI: Command Line Interface: protected by access keys
	- AWS SDK : for code: protected by access keys
 - access keys are generated through console
 - are secret, not shared, and managed by users
 - access key ID ~= username, secret access key ~= password

AWS CLI & SDK
---------------
 - tool that lets you use AWS using a shell
 - enables access to Public APIS within AWS
 - Can make scripts to manage resources
 - open source, can use instead of management console
 - AWS Software Development Kit(SDK)
 - Language-Specific
 - Enables management and access of AWS services
 - Embedded in a application
 - Supports various languages, Mobile SKD< and IoT Devices
 - Example: CLI is build on SDK for python

AWS Cloudshell
---------------
 - Working shell within AWS 
 - has environment, can make files, etc in the shell 
 - can also up and download files on AWS

IAM Roles for Services
------------------------
 - Some aws services will perform actions for user
 - AWS services will get permissions with IAM 
 - Create IAM role, and EC2 Instance. When Instance tries to access info from AWS, it will use the IAM role to retrieve info
 - Common Roles: EC2 instance roles, Lambda fun roles, Roles for CloudFormation
 
IAM Security Tools
-------------------
 - IAM Credentials Report(account-level): Report that lists all account users and status
 - Iam Access Advisor(user-level): Shows permissions user has and when they were used


IAM Guidelines
------------------
 - Don't use root acct other than setting up
 - 1 physical user = 1 AWS user
 - Users can go in groups with group permissions
 - Use strong password, and MFA 
 - Use roles for AWS services
 - Make access keys for programmitc acces like cli or shell
 - Audit permissions, remove unused perms
 - don't share access keys

IAM Summary 
------------
 - Policies: JSON doc that outlines permissions for users
 - Roles = services, groups = users
 - programmatic access given access keys
 - Audit for permissions
 
 
EC2
----
 - Most popular AWS offering
 - Elastic Compute Cloud: Infrastructure as a Service
 - Can Rent virtual machines(Ec2), store data on a virtual drive(EBS)
, distribute load across machines(ELB), Scale services using an auto-scaling group(ASG)
 - EC2 lets u rent the cloud on demand
 - Can choose linux, Windows, or MAC OSX for OS on EC2
 - How much CPU power, RAM, and how much space you want
	-Network Attached(EBS & EFS)
 	- Hardware(Ec2 Instance Store)
 - Network card:Speed and public IP 
 - Firewall Rules: security group
 - Bootstrap script(configure at first launch):Ec2 User Data
 - Can use EC2 User data script to bootstrap instances
 - Bootstrapping: launching commands when machine starts
 - Runs once at the first start
 - Used to automate tasks such as updates, installing software, getting common fieles,
 - EC2 Data script runs on root user

 - Example: t2.micro
	- 1 vCPU 1GB, EBS only storage, low to moderate network performance, 
 
EC2 Instance Types
-----------------------
 - 7 Different types of EC2 Instances
 - Naming convention
	m: instance class
	5: generation
	2xlarge: size within the instance class
 - creates m5.2xlarge
 - General Purpose: Good for diversity of workload such as server or repo
 	 - balance between computing, memory, and networking
 - Compute Optimized: Greate for computer-intensive tasks that require high performance processors
	- Like heavy workloads, high performance servers or computing, machine learning or scientific modeling, game server
 - Memory Optimized: Fast performance for workloads with large data sets in memory
	- Realtime processing of unstructured data, high performance
 - Storage Optimized: For tasks that require high,sequential read and write access to large data sets on local storage 

Introduction to Security Groups
---------------------------------
 - Fundamental to network security in AWS
 - Control how traffic is allowed in and out
 - only contain allow rules, can reference by IP or by security group
 -EX: Create a security group around EC2 instance that allows inbound traffic and outbound traffic 
 - act as a firewall
 - Regulate: Access to ports, authorized IP Ranges, control of inbound network(other to instance) and outbound (instance to other)
 - Can be attached to multiple instances
 - Instance can have multiple sec groups
 - Locked down to a region 
 - Lives outside of EC2, so if traffic is blocked EC2 won't know it exists
 - Maintain 1 sec group for SSH access 
 - if the application times out, it's a sec group issue
 - If connection is refused, then sec group worked, and EC2 was not launched 
 - default: no inbound, all outbound 
 - Can use security groups to communicate with diff EC2's because if the sec group authorizes a diff sec group that a diff instance has, it will allow traffic 

Ports to Know
-------------
 - 22: SSH(Secure Shell) log into Linux instance
 - 21:FTP(File transfter Protocol - Upload files into file share
 - 22 = SFTP (Secure File Transfer Protocol) - Upload files via SSH
 - 80 = HTTP - Access unsecured website
 - 443 - HTTPS - access secured website
 - 2289 -RDP (Remote Desktop Protocol) Log into windows instance 

 - If there is a timeout when you try to connect to your EC2 instance, the cause is always the security group rules
 

Purchasing options 
-------------------
On Demand: coming and staying when we want: full price
 - Reserved: Plan ahead, and if it's for a long time, maybe discount
 - Savings plan: pay a certain amount per hour for a certain period, stay anywhere we want( can manipulate instance types)
	Locked to a specific instance family and region
	
 - Dedicated Hosts: Book the entire server for yourself
	Allows compliance and software license req meeting
 - Dedicated Instance: Instance run on hardware for you; no control over instance placement
 - Capacity Reservation: book a room for full price, but don't always use


Spot Instances & Spot Fleet
---------------
 - A purchase option for EC2 Instances
 - Put a max price you're willing to pay, and if the curr < max, then you can start the instance
 - A spot instance can only be cancelled if it's open, active or disabled
 - To terminate a spot instance, first cancel the request, then terminate the associated instance
 - Spot fleet: Spot Instances and On-Demand Instances that allow you to get the spot instance with the lowest price

Other Stuff
-------------
 - Don't use IAM key in Ec2 instance
 - Instead, give instance the IAM role
 - Services have to get an IAM role, like Ec2 Instance


Private vs Public IP (IPv4)
----------------------------------
 - 2 types of Ip v4 and v6 
 - v4 is more common
 - Allows 3.7 Billion different addresses
 - On a private network, all the computers within the private network can talk to each other
 - With an internet gateway on a private network, you can access the internet
 - Public Ip
	Machine is on the internet
	Unique across the whole web
	Easy geo-location
 - Private ip
	Machine is identifiable only on private network
	IP must be uniqe across the private network 
	2 diff private networks can have the same IP
	Machine connect to internet using NAT + internet gateway(proxy)
	Only a specified range of IPs can be on private net
 - Elastic Ip
	a public Ipv4 that you own as long as you don't delete
	Associated with 1 instance 
	Can mask failure of a instance by remapping address to another instance
	5 elastic IPs w/ acct
	try to avoid- poor design
	use random public IP and register DNS to it 
 - Ec2 machine has a private Ip for internwal aws network, a public ip
 - when ssh, can't use private ip have to use public
 - public Ip can change  
 

placement Groups
-----------------
 - Sometimes you want to control the EC2 instance placement strat, placement group allows that
 - Specify by cluster
	instances clustered into low-latency group in 1 AZ
 - spread
	spread instances across underlying hardware
 - partition
	spread instances across different partitions(on different sets of racks) within 1 AZ 
	
- Cluster
	All EC2 instances on the same rack and same AZ(all on same hardware)
	Pros: Great network(10gbps bandwith)
	Con: If rack fails, all instances fail 
	Use-Case: Big data job that needs to be completed fast or need extremely low latency 
 - Spread:
	All Instances are on different hardwares
	Pros: Can span across AZ
		 Reduced risk of them all failing
	Cons: Limited to 8 instances per AZ per placement group
	Use Case: Application that needs to max high availability
			 Critical application where failures must be isolated
 - Partition: Up to 7 partitions in different AZ, each partition has multiple Ec2 Instances
	Each partition is a rack, so one partition is on 1 set of hardware
	can be across multiple AZs in same region
	Up to 100s of instances
	Each partition has its own rack
	A partition failure will result in some instances failing, but won't affect other partitions
	Ec2 instances get access to partition info from metadata
	Use case: When you have an application that is partition aware(HDFS, HBase, Cassandra, Apache Kafka)

ENI - Elastic Network Interfaces
----------------------------------
 - Logical component in a VPC that represent a virtual network card
 - ENI is attached to an EC2
 - Each ENI has 
	Primary private IPv4, >= 1 secondary IPv4
	One Elastic IPv4 per private IPv4
	1 Public Ipv4
	>=1 sec group
	a mac address
 - Can create ENI independently and attach onto EC2 and can move them around 
 - bound to an AZ
 - allows failover 
 - Creating your own ENI allows more control over network and 
 
EC2 Hibernate
--------------
 - When we stop an instance, the data will be intact, but if its terminated, the ebs (data on disk) will be destroyed
 - On start: Os boots, Ec2 User Data script runs, then OS boots up, App starts, and cache warms up 	
 - Hibernate: in memory state is preserved, so instance boot is much faster 
 - Under the hood: the ram State is written to a file in the root EBS volume, which must be encrypted 
 - When Hibernation occurs: Instance stops. Ram is dumped onto EB. EC2 shut down
 - WHen it starts back up: Ram is loaded from EBS, and starts up faster
 - Use Case: Long-running processes, save RAM State, Services that take a long time to initialize 
 - Supports lots of instance families
 - Must be less than 150 GB
 - Works for many OS, works for Root volume 
 - Available for On-Demand, Reserved, and spot
 - Can't be for more than 60 days 
 - "uptime" tells you how long the instance has been running

