Definitions 
-----------

API: Telling program to run in an application
-(A)pplication
-(P)rogramming
-(I)nterface
-API is telling a program to run 

End Point: Where an application/Interface is stored

API Mashup: API from other API's

Web Service: API that uses the internet

HTTP: HyperText Transfer Protocol

Idempotence: Safe to repeat

REST: Representation State Transfer

SOAP: Simple Object Access Protocol 

Stateless: Not knowing the request coming in before it comes in 


API Notes 
---------

-API's exist when you can tell (using an interface) a program (P) to run inside of an (A)pplication
-Useful b/c
	- Can use without documentation
	- Platform independent (can use on any device that can reach interface)
	- Upgrade Safe
-3 Objects in an API transaction
 1. Request for completion of a task
 2. Program running to complete said task
 3. Response from program

-API Example: Searching Tuna on Google's search engine
1. User makes request using Google search page(Interface) for tuna (query) 
2. Google's server runs the earch program using the tuna query
3. Google returns the webpage with all of the results of the search to the user

-All web services are API's, but not all API's are web services 
-Use JSON,XML,REST, & SOAP for transferring data over the internet


HTTP Notes 
----------
4 Parts to a HTTP Request and Response
 1. Start Line - Mandatory
 2. Headers - Optional
 3. Blank Line - Optional
 4. Body - Optional

Request Side
-Start Line: Uses Version 1.1, Usually the method being called
-Header: Host(URL)/Security token, as well as properties about data
-Blank Line: Nothing
-Body: Depends on what is being sent

Response Side
-Start Line: Status Codes (Like 200 OK)
-Header: Cookies, file size, etc.
-Blank Line: Nothing
-Body: Depends on what is being sent

Start Line- Request Side
-Called Start/Request Line
Contains
	HTTP Version(1.1)
	Method(usually GET,POST,PUT,DELETE, can be something else)
	API Program Folder Location
	Parameters
Formated as: "Method APIPR.F+Parameter HTTPVer.
Example: "GET /search?q=tune HTTP/1.1"

Start Line- Response Side
-Called Start,Response, or Status Line
-Contains
	HTTP Version(1.1)
	Status Code
-Formatted as: "HTTPVer. Status Code"
-Example: HTTP/1.1 200"

Status Codes:
-1XX: Informational Response (Like request recieved; 100 Continue)
-2XX: Success (200 OK)
-3XX: Redirection (301 Moved Permantently)
-4XX: Client Error (404 Not found)
-5XX: Service Error (504 Timeout)

Common Methods:
-GET: Read (Idempotent)
-POST: Create (Not Idempotent)
-PUT: Update (Idempotent)
-DELETE: Delete (Idempotent)

Headers: Give properties to a program
Examples of Headers:
-Accept-Language: What language to use
-Authorization: Authentication Credentials(Valid, etc.)
-Content-type: What form content will be sent in 

-Blank Line: Separates headers from body

Body:
-Contains content sent to/from API
-Commonly use JSON & XML to send and receive data
-Header line "content-type" determines the type being used

-HTTP uses cookies to track data
-Coookies are not executable, lines of text/data
-Applications use session id(cookie) to store data 


Statelessness
------
-In HTTP, the state will be the web request and response
-HTTP Stateless: Request is unknown before it comes in 
-HTTP is stateless by default
-The methods SOAP and REST are also stateless
-Example of Stateful transfer: 2 computer who know each other who know what is being sent & received
-- Like knowing who is calling you on a telephone


HTTP Infrastructure
-------------------
-Application
-Client
-Initial Receiver
-Server
-Client-Server Connection
-Memory

-Benefits of Stateless Infrastructure
--Scalability
--Resilience(How much or little it crashes)
--Less Memory usage

XML
---
-Extensible Markup Language
-Content type used in HTTP
-Actual XML code is in the body
-Uses "<>" tags


JSON
----
-JavaScript Object Orientation
-Holds data
-Content-type: application/json
-Uses "key": "value" pairing ("Size": "Small")
-Starts with Data Object
Example:
{"Pizza" : [
	{"Size": "Small, "Toppings": ["Onion", "Mushroom"]
	}
]
}
-Lightweight and Serialized
-Used much more often than XML, and is the primary language used in Data transference

SOAP
----
-Simple Object Access Protocol
-Uses WSDL(Web Services Description Languag)
-Uses POST method for every request
-Not commonly used anymore

HTTP Request using SOAP:
Start Line: POST WSDL HTTP Ver.
Header Line: content-type: text/xml
Blank Line
Body: XML envelope using XML


REST
----
-Representational State Transfer
-Uses Method(CRUD) in start line
-Uses JSON to send data
-No rules
-Used to complete Web Service using HTTP

HTTP Request using REST:
-Start Line: All methods
-Header Line: All headers
-Blank Line
Body: Any type

Security Types & Needs
----------------------
-No Auth(entication): Doesn't need anything (Example: Google search)
-Basic Auth(entication): Needs authentication (Example: Logging into email)
-Bearer Token: Needs Authorization
-OAuth(orization): Needs Authentication and Authorization (Example: Waze)
-2FA: Needs Authentication (High Security)


Apps
----
3 Types of Apps
-Native
-Web 
-Hybrid

-Native: Runs on Operating System
--OS: Messenger between user & hardware
--OS has API's that apps can access( like vibration, touch screen, camera)
---All low level APIS
--Native Apps have to be os-locked
-Best @: Quality, speed, devices Access

-Web App: App is stores in browser, which calls API's
--Made in HTML
--Limited ability for API calling
-Example: Youtube
-Best @: Cost 

-Hybrid: hybrid of both
1. Native and web app talk to each other & call APIs
2. Web app in browser
--App calls browser, browser --> middleware, middleware -> API @ OS
-Best @: Store availability, devicess access(ok)


OAuth
-----
-Allows 3rd Party Access
-Limited(authorized) access to a web servce
-Introduces an authorization layer
--Gives access token instead of login credentials to a 3rd party

Roles in OAuth:
-Resource Owner
-Resource Server
-Client/Application: 3rd Party
-Authorization Server: Provides authentication token 

Protocol Flow:
1. Client puts in Authorization Request to Resource Owner
2. Resource Owner provides Authorization Grant to Client
3. Client puts in Authorization Grant (2) to Authorization Server
4. Authorization Server provides Access Token to Client
5. Client puts in Access Token to Resource Server
6. Resource Server provides access to protected resource to Client 

Authorization Grant Types:
-Authorization Code
-Implicit
-Resource Owner
-Client Credentials

-AT & RT are in string format 
-Access token gives access to resource
-refresh token gives another access token
--Must last longer than AT







